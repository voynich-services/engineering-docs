"use strict";(self.webpackChunkvoynich_docs=self.webpackChunkvoynich_docs||[]).push([["747"],{65:function(e,n,i){i.d(n,{Z:()=>o,a:()=>l});var s=i(7294);let t={},r=s.createContext(t);function l(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},7566:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>l,default:()=>h,contentTitle:()=>o,assets:()=>d,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"onboarding/Clean-Code-Guidelines","title":"Clean Code Guidelines","description":"Writing clean, readable, and maintainable code is a core skill for every software engineer. This chapter gives you a lightweight but powerful set of guidelines to follow when contributing to this project.","source":"@site/docs/onboarding/06-Clean-Code-Guidelines.md","sourceDirName":"onboarding","slug":"/onboarding/Clean-Code-Guidelines","permalink":"/engineering-docs/docs/onboarding/Clean-Code-Guidelines","draft":false,"unlisted":false,"editUrl":"https://github.com/voynich-services/website/docs/onboarding/06-Clean-Code-Guidelines.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_label":"Clean Code Guidelines","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Your First Feature","permalink":"/engineering-docs/docs/onboarding/Your-First-Feature"}}'),t=i(5893),r=i(65);let l={sidebar_label:"Clean Code Guidelines",sidebar_position:6},o="Clean Code Guidelines",d={},a=[{value:"1. Meaningful Naming",id:"1-meaningful-naming",level:2},{value:"2. Keep Functions Small",id:"2-keep-functions-small",level:2},{value:"3. Avoid Magic Values",id:"3-avoid-magic-values",level:2},{value:"4. Clean and Consistent Formatting",id:"4-clean-and-consistent-formatting",level:2},{value:"5. Avoid Unused Code",id:"5-avoid-unused-code",level:2},{value:"6. Comment Wisely",id:"6-comment-wisely",level:2},{value:"7. Follow the Existing Project Structure",id:"7-follow-the-existing-project-structure",level:2},{value:"8. Test Your Changes",id:"8-test-your-changes",level:2},{value:"9. Git Hygiene",id:"9-git-hygiene",level:2},{value:"10. Ask for Feedback",id:"10-ask-for-feedback",level:2},{value:"Useful Links",id:"useful-links",level:2}];function c(e){let n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"clean-code-guidelines",children:"Clean Code Guidelines"})}),"\n",(0,t.jsx)(n.p,{children:"Writing clean, readable, and maintainable code is a core skill for every software engineer. This chapter gives you a lightweight but powerful set of guidelines to follow when contributing to this project."}),"\n",(0,t.jsx)(n.p,{children:"These aren\u2019t just rules \u2014 they\u2019re habits that scale across any serious software project."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"1-meaningful-naming",children:"1. Meaningful Naming"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"descriptive names"})," that tell what the function/variable/class does."]}),"\n",(0,t.jsxs)(n.li,{children:["Prefer ",(0,t.jsx)(n.code,{children:"get_author_by_id()"})," over ",(0,t.jsx)(n.code,{children:"getData()"})," or ",(0,t.jsx)(n.code,{children:"func1"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Use consistent naming patterns (e.g., snake_case for Python, camelCase for JS)."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-keep-functions-small",children:"2. Keep Functions Small"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A function should do ",(0,t.jsx)(n.strong,{children:"one thing only"}),", and do it well."]}),"\n",(0,t.jsx)(n.li,{children:"If it takes more than ~20 lines or does multiple tasks, split it."}),"\n",(0,t.jsxs)(n.li,{children:["Example: Separate ",(0,t.jsx)(n.code,{children:"fetch_data()"}),", ",(0,t.jsx)(n.code,{children:"transform_data()"}),", and ",(0,t.jsx)(n.code,{children:"render_data()"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"3-avoid-magic-values",children:"3. Avoid Magic Values"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Never hardcode values like URLs, IDs, or config flags."}),"\n",(0,t.jsxs)(n.li,{children:["Put them in a ",(0,t.jsx)(n.code,{children:"constants"})," file, or better yet, in the ",(0,t.jsx)(n.code,{children:".env"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// \u274C Don\u2019t\r\nconst baseUrl = "http://localhost:8000/api";\r\n\r\n// \u2705 Do\r\nconst baseUrl = import.meta.env.VITE_API_URL;\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"4-clean-and-consistent-formatting",children:"4. Clean and Consistent Formatting"}),"\n",(0,t.jsx)(n.p,{children:"We use:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ruff"})," and ",(0,t.jsx)(n.code,{children:"pre-commit"})," for backend Python formatting."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eslint"})," and ",(0,t.jsx)(n.code,{children:"prettier"})," for frontend formatting."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Make sure to install and run pre-commit hooks (already explained in ",(0,t.jsx)(n.code,{children:"02-Environment-Setup.md"}),")."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"5-avoid-unused-code",children:"5. Avoid Unused Code"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Delete commented-out code, unused imports, and logs before pushing."}),"\n",(0,t.jsxs)(n.li,{children:["Don\u2019t leave ",(0,t.jsx)(n.code,{children:"console.log()"})," or ",(0,t.jsx)(n.code,{children:"print()"})," in production logic."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"6-comment-wisely",children:"6. Comment Wisely"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Don\u2019t comment what the code already clearly says."}),"\n",(0,t.jsxs)(n.li,{children:["Use comments to explain ",(0,t.jsx)(n.strong,{children:"why"}),", not ",(0,t.jsx)(n.strong,{children:"what"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"// \u2705 Good\r\n// Using `$regex` for case-insensitive partial matching in tag search\r\n\r\n// \u274C Bad\r\n// loop through tags\r\nfor (const tag of tags) { ... }\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"7-follow-the-existing-project-structure",children:"7. Follow the Existing Project Structure"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Don\u2019t create new folders or modules unless necessary."}),"\n",(0,t.jsx)(n.li,{children:"Keep new features consistent with current patterns."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"8-test-your-changes",children:"8. Test Your Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Test the API with tools like Postman or VSCode REST Client."}),"\n",(0,t.jsx)(n.li,{children:"Check the frontend works visually and functionally."}),"\n",(0,t.jsx)(n.li,{children:"Run unit tests if they exist, or write a basic one for your feature."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"9-git-hygiene",children:"9. Git Hygiene"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use clear, descriptive commit messages (e.g., ",(0,t.jsx)(n.code,{children:"feat: add random quote endpoint"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Don\u2019t commit sensitive info or local DB dumps."}),"\n",(0,t.jsx)(n.li,{children:"Don\u2019t push large assets or debug logs."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"10-ask-for-feedback",children:"10. Ask for Feedback"}),"\n",(0,t.jsx)(n.p,{children:"You\u2019re not alone. If you\u2019re unsure, ask. Clean code is a team standard, not just a personal style."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Stick to these principles and you'll not only contribute clean code \u2014 you'll be building habits that make you a stronger engineer in the long run."}),"\n",(0,t.jsx)(n.h2,{id:"useful-links",children:"Useful Links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Clean Code Summary"})," (by Robert C. Martin, aka Uncle Bob):",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29",children:"https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Clean Code JavaScript"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://github.com/ryanmcdermott/clean-code-javascript",children:"https://github.com/ryanmcdermott/clean-code-javascript"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Google Python Style Guide"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://google.github.io/styleguide/pyguide.html",children:"https://google.github.io/styleguide/pyguide.html"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"PEP 8 \u2013 Python Style Guide"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://peps.python.org/pep-0008/",children:"https://peps.python.org/pep-0008/"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"JavaScript Standard Style Guide"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://standardjs.com/",children:"https://standardjs.com/"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"VSCode: Debugging Guide"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://code.visualstudio.com/docs/editor/debugging",children:"https://code.visualstudio.com/docs/editor/debugging"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"JetBrains PyCharm: Debugging Python"}),":",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.jetbrains.com/help/pycharm/debugging-your-first-python-application.html",children:"https://www.jetbrains.com/help/pycharm/debugging-your-first-python-application.html"})]}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);