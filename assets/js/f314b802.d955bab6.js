"use strict";(self.webpackChunkvoynich_docs=self.webpackChunkvoynich_docs||[]).push([["747"],{65:function(e,n,r){r.d(n,{Z:()=>o,a:()=>a});var s=r(7294);let t={},i=s.createContext(t);function a(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},7566:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,default:()=>u,contentTitle:()=>o,assets:()=>l,toc:()=>d,metadata:()=>s});var s=JSON.parse('{"id":"onboarding/Clean-Code-Guidelines","title":"Clean Code Guidelines","description":"Writing clean, readable, and maintainable code is a core skill for every software engineer. These guidelines will serve you well in any Python or React project throughout your career.","source":"@site/docs/onboarding/06-Clean-Code-Guidelines.md","sourceDirName":"onboarding","slug":"/onboarding/Clean-Code-Guidelines","permalink":"/engineering-docs/docs/onboarding/Clean-Code-Guidelines","draft":false,"unlisted":false,"editUrl":"https://github.com/voynich-services/engineering-docs/tree/main/docs/onboarding/06-Clean-Code-Guidelines.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_label":"Clean Code Guidelines","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Your First Feature","permalink":"/engineering-docs/docs/onboarding/Your-First-Feature"}}'),t=r(5893),i=r(65);let a={sidebar_label:"Clean Code Guidelines",sidebar_position:6},o="Clean Code Guidelines",l={},d=[{value:"Setup: Code Quality Tools",id:"setup-code-quality-tools",level:2},{value:"Python Projects",id:"python-projects",level:3},{value:"React/JavaScript Projects",id:"reactjavascript-projects",level:3},{value:"Universal Principles",id:"universal-principles",level:2},{value:"1. Meaningful Naming",id:"1-meaningful-naming",level:3},{value:"2. Keep Functions Small and Focused",id:"2-keep-functions-small-and-focused",level:3},{value:"3. Avoid Magic Numbers and Hardcoded Values",id:"3-avoid-magic-numbers-and-hardcoded-values",level:3},{value:"Python Best Practices",id:"python-best-practices",level:2},{value:"1. Use Type Hints",id:"1-use-type-hints",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. List Comprehensions and Generator Expressions",id:"3-list-comprehensions-and-generator-expressions",level:3},{value:"4. Context Managers",id:"4-context-managers",level:3},{value:"React Best Practices",id:"react-best-practices",level:2},{value:"1. Component Structure and Hooks",id:"1-component-structure-and-hooks",level:3},{value:"2. Event Handlers and State Updates",id:"2-event-handlers-and-state-updates",level:3},{value:"3. Custom Hooks for Reusable Logic",id:"3-custom-hooks-for-reusable-logic",level:3},{value:"General Best Practices",id:"general-best-practices",level:2},{value:"1. Code Comments",id:"1-code-comments",level:3},{value:"2. Testing Your Code",id:"2-testing-your-code",level:3},{value:"3. Git Best Practices",id:"3-git-best-practices",level:3},{value:"Code Review Checklist",id:"code-review-checklist",level:2},{value:"Useful Resources",id:"useful-resources",level:2},{value:"Contributing to This Documentation",id:"contributing-to-this-documentation",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"clean-code-guidelines",children:"Clean Code Guidelines"})}),"\n",(0,t.jsx)(n.p,{children:"Writing clean, readable, and maintainable code is a core skill for every software engineer. These guidelines will serve you well in any Python or React project throughout your career."}),"\n",(0,t.jsx)(n.p,{children:"These aren't just rules \u2014 they're professional habits that make you a better developer."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"setup-code-quality-tools",children:"Setup: Code Quality Tools"}),"\n",(0,t.jsx)(n.p,{children:"Before writing code, always set up automated code quality checks:"}),"\n",(0,t.jsx)(n.h3,{id:"python-projects",children:"Python Projects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install pre-commit hooks\r\npip install pre-commit\r\npre-commit install\r\n\r\n# Ruff handles linting and formatting (replaces black, isort, flake8, and more)\r\npip install ruff\n"})}),"\n",(0,t.jsx)(n.h3,{id:"reactjavascript-projects",children:"React/JavaScript Projects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install ESLint and Prettier (most projects come with these pre-configured)\r\nnpm install --save-dev eslint prettier\r\nnpm install --save-dev @eslint/js eslint-plugin-react-hooks eslint-plugin-react-refresh\r\n\r\n# Run linting and formatting\r\nnpm run lint\r\nnpm run format  # if available\n"})}),"\n",(0,t.jsx)(n.p,{children:"This ensures consistent code style and catches common issues automatically."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"universal-principles",children:"Universal Principles"}),"\n",(0,t.jsx)(n.h3,{id:"1-meaningful-naming",children:"1. Meaningful Naming"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.strong,{children:"descriptive names"})," that clearly indicate purpose:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 Good\r\ndef calculate_monthly_payment(principal, interest_rate, months):\r\n    return principal * (interest_rate / 12) * ((1 + interest_rate / 12) ** months)\r\n\r\nuser_email = "john@example.com"\r\nis_email_valid = validate_email(user_email)\r\n\r\n# \u274C Bad\r\ndef calc(p, r, m):\r\n    return p * (r/12) * ((1 + r/12) ** m)\r\n\r\ndata = "john@example.com"\r\nflag = check(data)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// \u2705 Good\r\nconst [userProfile, setUserProfile] = useState(null);\r\nconst [isLoading, setIsLoading] = useState(false);\r\n\r\nconst handleSubmitForm = () => { /* clear purpose */ };\r\n\r\n// \u274C Bad\r\nconst [data, setData] = useState(null);\r\nconst [flag, setFlag] = useState(false);\r\n\r\nconst onClick = () => { /* unclear what this does */ };\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-keep-functions-small-and-focused",children:"2. Keep Functions Small and Focused"}),"\n",(0,t.jsxs)(n.p,{children:["A function should do ",(0,t.jsx)(n.strong,{children:"one thing only"}),", and do it well:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - single responsibility\r\ndef validate_email(email):\r\n    return "@" in email and "." in email\r\n\r\ndef send_welcome_email(user_email):\r\n    if not validate_email(user_email):\r\n        raise ValueError("Invalid email")\r\n    # Send email logic here\r\n\r\n# \u274C Bad - multiple responsibilities\r\ndef process_user(email):\r\n    # Validation\r\n    if not "@" in email or not "." in email:\r\n        raise ValueError("Invalid email")\r\n    # Database save\r\n    save_to_database(email)\r\n    # Email sending\r\n    send_email(email)\r\n    # Logging\r\n    log_user_creation(email)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-avoid-magic-numbers-and-hardcoded-values",children:"3. Avoid Magic Numbers and Hardcoded Values"}),"\n",(0,t.jsx)(n.p,{children:"Use constants and configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 Good\r\nMAX_RETRY_ATTEMPTS = 3\r\nDEFAULT_TIMEOUT = 30\r\nAPI_BASE_URL = os.getenv("API_BASE_URL", "https://api.example.com")\r\n\r\ndef fetch_data(endpoint):\r\n    for attempt in range(MAX_RETRY_ATTEMPTS):\r\n        try:\r\n            response = requests.get(f"{API_BASE_URL}/{endpoint}", timeout=DEFAULT_TIMEOUT)\r\n            return response.json()\r\n        except requests.RequestException:\r\n            if attempt == MAX_RETRY_ATTEMPTS - 1:\r\n                raise\r\n\r\n# \u274C Bad\r\ndef fetch_data(endpoint):\r\n    for attempt in range(3):  # Magic number\r\n        try:\r\n            response = requests.get(f"https://api.example.com/{endpoint}", timeout=30)\r\n            return response.json()\r\n        except requests.RequestException:\r\n            if attempt == 2:  # Magic number\r\n                raise\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// \u2705 Good\r\nconst API_ENDPOINTS = {\r\n  USERS: '/api/users',\r\n  POSTS: '/api/posts'\r\n};\r\n\r\nconst PAGINATION = {\r\n  DEFAULT_PAGE_SIZE: 10,\r\n  MAX_PAGE_SIZE: 100\r\n};\r\n\r\n// \u274C Bad\r\nconst response = await fetch('/api/users?limit=10'); // Hardcoded values\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python-best-practices",children:"Python Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-type-hints",children:"1. Use Type Hints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - Modern Python 3.9+ built-in types\r\ndef get_user_by_id(user_id: int) -> dict[str, str] | None:\r\n    """Fetch user data by ID."""\r\n    # Implementation here\r\n    pass\r\n\r\ndef process_items(items: list[str]) -> list[str]:\r\n    """Process a list of items and return processed list."""\r\n    return [item.upper() for item in items]\r\n\r\ndef get_user_settings(user_id: int) -> dict[str, str | int | bool]:\r\n    """Get user settings with mixed value types."""\r\n    # Implementation here\r\n    pass\r\n\r\n# \u274C Bad - no type hints\r\ndef get_user_by_id(user_id):\r\n    # No one knows what this returns\r\n    pass\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# \u2705 Good - specific exceptions\r\ndef divide_numbers(a: float, b: float) -> float:\r\n    if b == 0:\r\n        raise ValueError("Cannot divide by zero")\r\n    return a / b\r\n\r\ndef fetch_user(user_id: int) -> dict[str, any]:\r\n    try:\r\n        response = requests.get(f"/api/users/{user_id}")\r\n        response.raise_for_status()\r\n        return response.json()\r\n    except requests.HTTPError as e:\r\n        if e.response.status_code == 404:\r\n            raise UserNotFoundError(f"User {user_id} not found")\r\n        raise APIError(f"Failed to fetch user: {e}")\r\n\r\n# \u274C Bad - bare except\r\ndef fetch_user(user_id):\r\n    try:\r\n        response = requests.get(f"/api/users/{user_id}")\r\n        return response.json()\r\n    except:  # Too broad\r\n        return None\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-list-comprehensions-and-generator-expressions",children:"3. List Comprehensions and Generator Expressions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u2705 Good - readable and efficient\r\nactive_users = [user for user in users if user.is_active]\r\nuser_emails = [user.email for user in active_users]\r\n\r\n# For large datasets, use generators\r\ndef process_large_dataset(items):\r\n    return (expensive_operation(item) for item in items if item.is_valid)\r\n\r\n# \u274C Bad - verbose loops\r\nactive_users = []\r\nfor user in users:\r\n    if user.is_active:\r\n        active_users.append(user)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-context-managers",children:"4. Context Managers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u2705 Good - automatic resource cleanup\r\ndef read_config_file(filename: str) -> dict[str, any]:\r\n    with open(filename, 'r') as file:\r\n        return json.load(file)\r\n\r\ndef database_transaction():\r\n    with get_db_connection() as conn:\r\n        with conn.transaction():\r\n            # Database operations here\r\n            pass\r\n\r\n# \u274C Bad - manual resource management\r\ndef read_config_file(filename):\r\n    file = open(filename, 'r')\r\n    data = json.load(file)\r\n    file.close()  # Easy to forget!\r\n    return data\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"react-best-practices",children:"React Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-component-structure-and-hooks",children:"1. Component Structure and Hooks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// \u2705 Good - clear structure, proper hooks usage\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nfunction UserProfile({ userId }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchUser = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await fetch(`/api/users/${userId}`);\r\n      if (!response.ok) throw new Error('Failed to fetch user');\r\n      \r\n      const userData = await response.json();\r\n      setUser(userData);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    fetchUser();\r\n  }, [fetchUser]);\r\n\r\n  if (loading) return <LoadingSpinner />;\r\n  if (error) return <ErrorMessage error={error} />;\r\n  if (!user) return <NotFound />;\r\n\r\n  return (\r\n    <div className=\"user-profile\">\r\n      <h1>{user.name}</h1>\r\n      <p>{user.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n// \u274C Bad - mixed concerns, poor error handling\r\nfunction UserProfile({ userId }) {\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    fetch(`/api/users/${userId}`)\r\n      .then(res => res.json())\r\n      .then(setData);\r\n  }, [userId]);\r\n\r\n  return <div>{data ? data.name : 'Loading...'}</div>;\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-event-handlers-and-state-updates",children:"2. Event Handlers and State Updates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// \u2705 Good - clear handler names, proper state updates\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [newTodo, setNewTodo] = useState('');\r\n\r\n  const handleAddTodo = useCallback(() => {\r\n    if (newTodo.trim()) {\r\n      setTodos(prev => [...prev, { id: Date.now(), text: newTodo, completed: false }]);\r\n      setNewTodo('');\r\n    }\r\n  }, [newTodo]);\r\n\r\n  const handleToggleTodo = useCallback((id) => {\r\n    setTodos(prev => \r\n      prev.map(todo => \r\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const handleDeleteTodo = useCallback((id) => {\r\n    setTodos(prev => prev.filter(todo => todo.id !== id));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        value={newTodo}\r\n        onChange={(e) => setNewTodo(e.target.value)}\r\n        onKeyDown={(e) => e.key === 'Enter' && handleAddTodo()}\r\n      />\r\n      <button onClick={handleAddTodo}>Add Todo</button>\r\n      \r\n      {todos.map(todo => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          onToggle={() => handleToggleTodo(todo.id)}\r\n          onDelete={() => handleDeleteTodo(todo.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-custom-hooks-for-reusable-logic",children:"3. Custom Hooks for Reusable Logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// \u2705 Good - extract reusable logic\r\nfunction useApi(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const response = await fetch(url);\r\n        if (!response.ok) throw new Error(`HTTP ${response.status}`);\r\n        const result = await response.json();\r\n        setData(result);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading, error };\r\n}\r\n\r\n// Usage in components\r\nfunction UserList() {\r\n  const { data: users, loading, error } = useApi('/api/users');\r\n  \r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  \r\n  return (\r\n    <ul>\r\n      {users.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"general-best-practices",children:"General Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-code-comments",children:"1. Code Comments"}),"\n",(0,t.jsxs)(n.p,{children:["Comment the ",(0,t.jsx)(n.strong,{children:"why"}),", not the ",(0,t.jsx)(n.strong,{children:"what"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# \u2705 Good - explains reasoning\r\n# Using exponential backoff to avoid overwhelming the API during retries\r\ndef retry_with_backoff(func, max_attempts=3):\r\n    for attempt in range(max_attempts):\r\n        try:\r\n            return func()\r\n        except APIRateLimitError:\r\n            # Wait exponentially longer between retries\r\n            sleep_time = 2 ** attempt\r\n            time.sleep(sleep_time)\r\n\r\n# \u274C Bad - describes what code already shows\r\n# Loop through attempts\r\nfor attempt in range(max_attempts):\r\n    # Try to call function\r\n    try:\r\n        return func()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-testing-your-code",children:"2. Testing Your Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Always write testable code\r\ndef calculate_discount(price: float, discount_percent: float) -> float:\r\n    """Calculate discounted price."""\r\n    if discount_percent < 0 or discount_percent > 100:\r\n        raise ValueError("Discount must be between 0 and 100")\r\n    return price * (1 - discount_percent / 100)\r\n\r\n# Easy to test\r\ndef test_calculate_discount():\r\n    assert calculate_discount(100, 10) == 90\r\n    assert calculate_discount(100, 0) == 100\r\n    \r\n    with pytest.raises(ValueError):\r\n        calculate_discount(100, -5)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-git-best-practices",children:"3. Git Best Practices"}),"\n",(0,t.jsx)(n.p,{children:"Use clear, descriptive commit messages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# \u2705 Good - descriptive and categorized\r\ngit commit -m "feat: add user authentication system"\r\ngit commit -m "fix: resolve memory leak in image processing"\r\ngit commit -m "refactor: extract database connection logic"\r\ngit commit -m "docs: update API documentation"\r\n\r\n# \u274C Bad - unclear purpose\r\ngit commit -m "update"\r\ngit commit -m "fixes"\r\ngit commit -m "changes"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"code-review-checklist",children:"Code Review Checklist"}),"\n",(0,t.jsx)(n.p,{children:"Before submitting any code:"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Meaningful names"})," for variables, functions, and classes"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Functions are small"})," and do one thing well"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"No hardcoded values"})," - use constants or config"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Proper error handling"})," with specific exceptions"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Code is formatted"})," consistently (use automated tools)"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"No unused imports"})," or dead code"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Comments explain why"}),", not what"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Tests pass"})," and new features are tested"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(n.strong,{children:"Commit messages"})," are clear and descriptive"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"useful-resources",children:"Useful Resources"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"General Clean Code:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29",children:"Clean Code Summary"})," by Robert C. Martin"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670",children:"Code Complete"})," by Steve McConnell"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Python:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://peps.python.org/pep-0008/",children:"PEP 8 \u2013 Python Style Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://google.github.io/styleguide/pyguide.html",children:"Google Python Style Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://realpython.com/tutorials/best-practices/",children:"Real Python Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"React/JavaScript:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://react.dev/",children:"React Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://standardjs.com/",children:"JavaScript Standard Style"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/ryanmcdermott/clean-code-javascript",children:"Clean Code JavaScript"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://react.dev/learn/thinking-in-react",children:"React Best Practices"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Remember: Clean code is not about perfection \u2014 it's about ",(0,t.jsx)(n.strong,{children:"clarity, maintainability, and respect for your future self and teammates"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"contributing-to-this-documentation",children:"Contributing to This Documentation"}),"\n",(0,t.jsxs)(n.p,{children:["Found something unclear, outdated, or missing? ",(0,t.jsx)(n.strong,{children:"Help improve this guide for future developers!"})]}),"\n",(0,t.jsx)(n.p,{children:"As you work through these guidelines, you might:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Discover better examples or clearer explanations"}),"\n",(0,t.jsx)(n.li,{children:"Find outdated practices that need updating"}),"\n",(0,t.jsx)(n.li,{children:"Notice missing topics that would be helpful"}),"\n",(0,t.jsx)(n.li,{children:"Spot typos or formatting issues"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"How to contribute:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Submit a pull request"})," to the ",(0,t.jsx)(n.a,{href:"https://github.com/voynich-services/engineering-docs",children:"engineering-docs repository"})," with your suggested changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Share feedback"})," with your mentor about what was confusing or helpful"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Your contributions make this documentation better for everyone. Documentation is code too \u2014 it deserves the same care and continuous improvement!"})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);